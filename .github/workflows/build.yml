# .github/workflows/build.yml
name: Build & Release App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build_and_release:
    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Get App Info from package.json
        id: package
        uses: jaywcjlove/github-action-package@v2.0.0

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libasound2t64 libxtst-dev libxss1 libnss3 xvfb

      - name: Install dependencies
        run: npm install

      - name: Build Application Packages
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            xvfb-run --auto-servernum npx electron-forge make
          else
            npx electron-forge make
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      - name: List build artifacts
        shell: bash
        run: |
          echo "Listing contents of 'out/make' directory:"
          ls -R out/make

      - name: Upload Artifacts to Private Repo Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          TAG: ${{ github.ref_name }}
          APP_NAME: ${{ steps.package.outputs.name }}
        shell: bash
        run: |
          # --- THIS IS THE FIX: Hardcode the correct private repository name ---
          PRIVATE_REPO="iamplayerexe/zip_analyser_app"
          
          echo "Preparing to release version ${TAG} of ${APP_NAME} to ${PRIVATE_REPO}"

          # Create the release in the private repository
          gh release create "${TAG}" --repo "${PRIVATE_REPO}" --title "${APP_NAME} ${TAG}" --notes "Automated release of ${APP_NAME} version ${TAG}." || echo "Release ${TAG} already exists. Proceeding to upload assets."

          echo "Uploading assets..."
          
          # Use specific paths for each OS to avoid globbing issues.
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            gh release upload "${TAG}" --repo "${PRIVATE_REPO}" --clobber out/make/zip/win32/x64/*.zip
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            gh release upload "${TAG}" --repo "${PRIVATE_REPO}" --clobber out/make/*.dmg
          else # Linux
            gh release upload "${TAG}" --repo "${PRIVATE_REPO}" --clobber out/make/zip/linux/x64/*.zip
          fi

          echo "Release process complete."